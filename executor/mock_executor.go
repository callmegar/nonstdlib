/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Automatically generated by MockGen. DO NOT EDIT!
// Source: executor.go

package executor

import (
	gomock "github.com/golang/mock/gomock"
	stats "github.com/turbinelabs/nonstdlib/stats"
)

// Mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *_MockExecutorRecorder
}

// Recorder for MockExecutor (not exported)
type _MockExecutorRecorder struct {
	mock *MockExecutor
}

func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &_MockExecutorRecorder{mock}
	return mock
}

func (_m *MockExecutor) EXPECT() *_MockExecutorRecorder {
	return _m.recorder
}

func (_m *MockExecutor) ExecAndForget(_param0 Func) {
	_m.ctrl.Call(_m, "ExecAndForget", _param0)
}

func (_mr *_MockExecutorRecorder) ExecAndForget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecAndForget", arg0)
}

func (_m *MockExecutor) Exec(_param0 Func, _param1 CallbackFunc) {
	_m.ctrl.Call(_m, "Exec", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec", arg0, arg1)
}

func (_m *MockExecutor) ExecMany(_param0 []Func, _param1 ManyCallbackFunc) {
	_m.ctrl.Call(_m, "ExecMany", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) ExecMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecMany", arg0, arg1)
}

func (_m *MockExecutor) ExecGathered(_param0 []Func, _param1 CallbackFunc) {
	_m.ctrl.Call(_m, "ExecGathered", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) ExecGathered(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecGathered", arg0, arg1)
}

func (_m *MockExecutor) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockExecutorRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockExecutor) SetStats(_param0 stats.Stats) {
	_m.ctrl.Call(_m, "SetStats", _param0)
}

func (_mr *_MockExecutorRecorder) SetStats(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStats", arg0)
}
