// Automatically generated by MockGen. DO NOT EDIT!
// Source: executor.go

package executor

import (
	gomock "github.com/golang/mock/gomock"
	stats "github.com/turbinelabs/nonstdlib/stats"
)

// Mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *_MockExecutorRecorder
}

// Recorder for MockExecutor (not exported)
type _MockExecutorRecorder struct {
	mock *MockExecutor
}

func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &_MockExecutorRecorder{mock}
	return mock
}

func (_m *MockExecutor) EXPECT() *_MockExecutorRecorder {
	return _m.recorder
}

func (_m *MockExecutor) ExecAndForget(_param0 Func) {
	_m.ctrl.Call(_m, "ExecAndForget", _param0)
}

func (_mr *_MockExecutorRecorder) ExecAndForget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecAndForget", arg0)
}

func (_m *MockExecutor) Exec(_param0 Func, _param1 CallbackFunc) {
	_m.ctrl.Call(_m, "Exec", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec", arg0, arg1)
}

func (_m *MockExecutor) ExecMany(_param0 []Func, _param1 ManyCallbackFunc) {
	_m.ctrl.Call(_m, "ExecMany", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) ExecMany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecMany", arg0, arg1)
}

func (_m *MockExecutor) ExecGathered(_param0 []Func, _param1 CallbackFunc) {
	_m.ctrl.Call(_m, "ExecGathered", _param0, _param1)
}

func (_mr *_MockExecutorRecorder) ExecGathered(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecGathered", arg0, arg1)
}

func (_m *MockExecutor) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockExecutorRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockExecutor) SetStats(_param0 stats.Stats) {
	_m.ctrl.Call(_m, "SetStats", _param0)
}

func (_mr *_MockExecutorRecorder) SetStats(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetStats", arg0)
}
