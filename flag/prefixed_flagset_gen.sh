#!/bin/bash

# Each argument is treated as a type to generate a pair of flagset-style functions

SCRIPT=`basename $0`
FILE="gen_prefixed_flagset.go"
TEST_FILE="gen_prefixed_flagset_test.go"

cat >$FILE <<EOF
// This file was automatically generated by $SCRIPT.
// Any changes will be lost if this file is regenerated.
package flag

import (
	"time"
)
EOF

cat >$TEST_FILE <<EOF
// This file was automatically generated by $SCRIPT.
// Any changes will be lost if this file is regenerated.
package flag

import (
	"reflect"
	"time"
)

var (
	generatedTestCases = []prefixedFlagTestCase{
EOF

while [ -n "$1" ]; do
    T="$1"
    FNAME=$(echo $T | cut -d. -f2-)
    if [ "$FNAME" == "$T" ]; then
        FNAME="$(tr '[:lower:]' '[:upper:]' <<<${T:0:1})${T:1}"
    fi
    FNAMELOWER=$(tr '[:upper:]' '[:lower:]' <<<$FNAME)

    cat >>$FILE <<EOF

func (f *PrefixedFlagSet) ${FNAME}Var(p *${T}, name string, value ${T}, usage string) {
	f.FlagSet.${FNAME}Var(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) ${FNAME}(name string, value ${T}, usage string) *${T} {
	return f.FlagSet.${FNAME}(f.prefix+name, value, f.mkUsage(usage))
}
EOF

    ZEROVAL="${T}(0)"
    if [ "$T" == "bool" ]; then
        ZEROVAL="false"
    fi

    cat >>$TEST_FILE <<EOF
		{
			name:     "${FNAMELOWER}",
			flagType: reflect.TypeOf(${ZEROVAL}),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.${FNAME}(
					"${FNAMELOWER}",
					${ZEROVAL},
					flagUsage,
				)
			},
		},
		{
			name:     "${FNAMELOWER}-var",
			flagType: reflect.TypeOf(${ZEROVAL}),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target ${T}
				f.${FNAME}Var(
					&target,
					"${FNAMELOWER}-var",
					${ZEROVAL},
					flagUsage,
				)
				return &target
			},
		},
EOF

    shift
done

cat >>$TEST_FILE <<EOF
	}
)
EOF
