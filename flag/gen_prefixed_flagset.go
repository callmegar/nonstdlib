/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by prefixed_flagset_gen.sh.
// Any changes will be lost if this file is regenerated.
package flag

import (
	"time"
)

func (f *PrefixedFlagSet) BoolVar(p *bool, name string, value bool, usage string) {
	f.FlagSet.BoolVar(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Bool(name string, value bool, usage string) *bool {
	return f.FlagSet.Bool(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string) {
	f.FlagSet.DurationVar(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Duration(name string, value time.Duration, usage string) *time.Duration {
	return f.FlagSet.Duration(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Float64Var(p *float64, name string, value float64, usage string) {
	f.FlagSet.Float64Var(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Float64(name string, value float64, usage string) *float64 {
	return f.FlagSet.Float64(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) IntVar(p *int, name string, value int, usage string) {
	f.FlagSet.IntVar(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Int(name string, value int, usage string) *int {
	return f.FlagSet.Int(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Int64Var(p *int64, name string, value int64, usage string) {
	f.FlagSet.Int64Var(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Int64(name string, value int64, usage string) *int64 {
	return f.FlagSet.Int64(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) StringVar(p *string, name string, value string, usage string) {
	f.FlagSet.StringVar(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) String(name string, value string, usage string) *string {
	return f.FlagSet.String(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) UintVar(p *uint, name string, value uint, usage string) {
	f.FlagSet.UintVar(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Uint(name string, value uint, usage string) *uint {
	return f.FlagSet.Uint(f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Uint64Var(p *uint64, name string, value uint64, usage string) {
	f.FlagSet.Uint64Var(p, f.prefix+name, value, f.mkUsage(usage))
}

func (f *PrefixedFlagSet) Uint64(name string, value uint64, usage string) *uint64 {
	return f.FlagSet.Uint64(f.prefix+name, value, f.mkUsage(usage))
}
