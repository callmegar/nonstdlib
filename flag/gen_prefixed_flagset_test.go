// This file was automatically generated by prefixed_flagset_gen.sh.
// Any changes will be lost if this file is regenerated.
package flag

import (
	"reflect"
	"time"
)

var (
	generatedTestCases = []prefixedFlagTestCase{
		{
			name:     "bool",
			flagType: reflect.TypeOf(false),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Bool(
					"bool",
					false,
					flagUsage,
				)
			},
		},
		{
			name:     "bool-var",
			flagType: reflect.TypeOf(false),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target bool
				f.BoolVar(
					&target,
					"bool-var",
					false,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "duration",
			flagType: reflect.TypeOf(time.Duration(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Duration(
					"duration",
					time.Duration(0),
					flagUsage,
				)
			},
		},
		{
			name:     "duration-var",
			flagType: reflect.TypeOf(time.Duration(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target time.Duration
				f.DurationVar(
					&target,
					"duration-var",
					time.Duration(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "float64",
			flagType: reflect.TypeOf(float64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Float64(
					"float64",
					float64(0),
					flagUsage,
				)
			},
		},
		{
			name:     "float64-var",
			flagType: reflect.TypeOf(float64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target float64
				f.Float64Var(
					&target,
					"float64-var",
					float64(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "int",
			flagType: reflect.TypeOf(int(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Int(
					"int",
					int(0),
					flagUsage,
				)
			},
		},
		{
			name:     "int-var",
			flagType: reflect.TypeOf(int(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target int
				f.IntVar(
					&target,
					"int-var",
					int(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "int64",
			flagType: reflect.TypeOf(int64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Int64(
					"int64",
					int64(0),
					flagUsage,
				)
			},
		},
		{
			name:     "int64-var",
			flagType: reflect.TypeOf(int64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target int64
				f.Int64Var(
					&target,
					"int64-var",
					int64(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "string",
			flagType: reflect.TypeOf(string(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.String(
					"string",
					string(0),
					flagUsage,
				)
			},
		},
		{
			name:     "string-var",
			flagType: reflect.TypeOf(string(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target string
				f.StringVar(
					&target,
					"string-var",
					string(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "uint",
			flagType: reflect.TypeOf(uint(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Uint(
					"uint",
					uint(0),
					flagUsage,
				)
			},
		},
		{
			name:     "uint-var",
			flagType: reflect.TypeOf(uint(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target uint
				f.UintVar(
					&target,
					"uint-var",
					uint(0),
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "uint64",
			flagType: reflect.TypeOf(uint64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				return f.Uint64(
					"uint64",
					uint64(0),
					flagUsage,
				)
			},
		},
		{
			name:     "uint64-var",
			flagType: reflect.TypeOf(uint64(0)),
			addFlag: func(f *PrefixedFlagSet) interface{} {
				var target uint64
				f.Uint64Var(
					&target,
					"uint64-var",
					uint64(0),
					flagUsage,
				)
				return &target
			},
		},
	}
)
