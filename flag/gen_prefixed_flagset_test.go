/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by prefixed_flagset.go from prefixed_flagset_test.template.
// Any changes will be lost if this file is regenerated.

package flag

import (
	"time"

	"reflect"
)

var zeroValBool bool
var zeroValDuration time.Duration
var zeroValFloat64 float64
var zeroValInt int
var zeroValInt64 int64
var zeroValString string
var zeroValUint uint
var zeroValUint64 uint64

var (
	generatedTestCases = []prefixedFlagTestCase{
		{
			name:     "bool",
			flagType: reflect.TypeOf(zeroValBool),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Bool(
					"bool",
					zeroValBool,
					flagUsage,
				)
			},
		},
		{
			name:     "bool-var",
			flagType: reflect.TypeOf(zeroValBool),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target bool
				f.BoolVar(
					&target,
					"bool-var",
					zeroValBool,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "duration",
			flagType: reflect.TypeOf(zeroValDuration),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Duration(
					"duration",
					zeroValDuration,
					flagUsage,
				)
			},
		},
		{
			name:     "duration-var",
			flagType: reflect.TypeOf(zeroValDuration),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target time.Duration
				f.DurationVar(
					&target,
					"duration-var",
					zeroValDuration,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "float64",
			flagType: reflect.TypeOf(zeroValFloat64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Float64(
					"float64",
					zeroValFloat64,
					flagUsage,
				)
			},
		},
		{
			name:     "float64-var",
			flagType: reflect.TypeOf(zeroValFloat64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target float64
				f.Float64Var(
					&target,
					"float64-var",
					zeroValFloat64,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "int",
			flagType: reflect.TypeOf(zeroValInt),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Int(
					"int",
					zeroValInt,
					flagUsage,
				)
			},
		},
		{
			name:     "int-var",
			flagType: reflect.TypeOf(zeroValInt),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target int
				f.IntVar(
					&target,
					"int-var",
					zeroValInt,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "int64",
			flagType: reflect.TypeOf(zeroValInt64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Int64(
					"int64",
					zeroValInt64,
					flagUsage,
				)
			},
		},
		{
			name:     "int64-var",
			flagType: reflect.TypeOf(zeroValInt64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target int64
				f.Int64Var(
					&target,
					"int64-var",
					zeroValInt64,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "string",
			flagType: reflect.TypeOf(zeroValString),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.String(
					"string",
					zeroValString,
					flagUsage,
				)
			},
		},
		{
			name:     "string-var",
			flagType: reflect.TypeOf(zeroValString),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target string
				f.StringVar(
					&target,
					"string-var",
					zeroValString,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "uint",
			flagType: reflect.TypeOf(zeroValUint),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Uint(
					"uint",
					zeroValUint,
					flagUsage,
				)
			},
		},
		{
			name:     "uint-var",
			flagType: reflect.TypeOf(zeroValUint),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target uint
				f.UintVar(
					&target,
					"uint-var",
					zeroValUint,
					flagUsage,
				)
				return &target
			},
		},
		{
			name:     "uint64",
			flagType: reflect.TypeOf(zeroValUint64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				return f.Uint64(
					"uint64",
					zeroValUint64,
					flagUsage,
				)
			},
		},
		{
			name:     "uint64-var",
			flagType: reflect.TypeOf(zeroValUint64),
			addFlag: func(f *prefixedFlagSet) interface{} {
				var target uint64
				f.Uint64Var(
					&target,
					"uint64-var",
					zeroValUint64,
					flagUsage,
				)
				return &target
			},
		},
	}
)
