// Automatically generated by MockGen. DO NOT EDIT!
// Source: managed_proc.go

package proc

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of ManagedProc interface
type MockManagedProc struct {
	ctrl     *gomock.Controller
	recorder *_MockManagedProcRecorder
}

// Recorder for MockManagedProc (not exported)
type _MockManagedProcRecorder struct {
	mock *MockManagedProc
}

func NewMockManagedProc(ctrl *gomock.Controller) *MockManagedProc {
	mock := &MockManagedProc{ctrl: ctrl}
	mock.recorder = &_MockManagedProcRecorder{mock}
	return mock
}

func (_m *MockManagedProc) EXPECT() *_MockManagedProcRecorder {
	return _m.recorder
}

func (_m *MockManagedProc) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockManagedProc) Running() bool {
	ret := _m.ctrl.Call(_m, "Running")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Running() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Running")
}

func (_m *MockManagedProc) Completed() bool {
	ret := _m.ctrl.Call(_m, "Completed")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Completed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Completed")
}

func (_m *MockManagedProc) Hangup() error {
	ret := _m.ctrl.Call(_m, "Hangup")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Hangup() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hangup")
}

func (_m *MockManagedProc) Quit() error {
	ret := _m.ctrl.Call(_m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Quit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Quit")
}

func (_m *MockManagedProc) Kill() error {
	ret := _m.ctrl.Call(_m, "Kill")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Kill() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Kill")
}

func (_m *MockManagedProc) Usr1() error {
	ret := _m.ctrl.Call(_m, "Usr1")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Usr1() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Usr1")
}

func (_m *MockManagedProc) Wait() error {
	ret := _m.ctrl.Call(_m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagedProcRecorder) Wait() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait")
}
