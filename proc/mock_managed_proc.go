// Code generated by MockGen. DO NOT EDIT.
// Source: managed_proc.go

package proc

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManagedProc is a mock of ManagedProc interface
type MockManagedProc struct {
	ctrl     *gomock.Controller
	recorder *MockManagedProcMockRecorder
}

// MockManagedProcMockRecorder is the mock recorder for MockManagedProc
type MockManagedProcMockRecorder struct {
	mock *MockManagedProc
}

// NewMockManagedProc creates a new mock instance
func NewMockManagedProc(ctrl *gomock.Controller) *MockManagedProc {
	mock := &MockManagedProc{ctrl: ctrl}
	mock.recorder = &MockManagedProcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagedProc) EXPECT() *MockManagedProcMockRecorder {
	return m.recorder
}

// Path mocks base method
func (m *MockManagedProc) Path() string {
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockManagedProcMockRecorder) Path() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockManagedProc)(nil).Path))
}

// Args mocks base method
func (m *MockManagedProc) Args() []string {
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args
func (mr *MockManagedProcMockRecorder) Args() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockManagedProc)(nil).Args))
}

// Start mocks base method
func (m *MockManagedProc) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockManagedProcMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManagedProc)(nil).Start))
}

// Running mocks base method
func (m *MockManagedProc) Running() bool {
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Running indicates an expected call of Running
func (mr *MockManagedProcMockRecorder) Running() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockManagedProc)(nil).Running))
}

// Completed mocks base method
func (m *MockManagedProc) Completed() bool {
	ret := m.ctrl.Call(m, "Completed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Completed indicates an expected call of Completed
func (mr *MockManagedProcMockRecorder) Completed() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completed", reflect.TypeOf((*MockManagedProc)(nil).Completed))
}

// Hangup mocks base method
func (m *MockManagedProc) Hangup() error {
	ret := m.ctrl.Call(m, "Hangup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Hangup indicates an expected call of Hangup
func (mr *MockManagedProcMockRecorder) Hangup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockManagedProc)(nil).Hangup))
}

// Quit mocks base method
func (m *MockManagedProc) Quit() error {
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit
func (mr *MockManagedProcMockRecorder) Quit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockManagedProc)(nil).Quit))
}

// Kill mocks base method
func (m *MockManagedProc) Kill() error {
	ret := m.ctrl.Call(m, "Kill")
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill
func (mr *MockManagedProcMockRecorder) Kill() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockManagedProc)(nil).Kill))
}

// Term mocks base method
func (m *MockManagedProc) Term() error {
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(error)
	return ret0
}

// Term indicates an expected call of Term
func (mr *MockManagedProcMockRecorder) Term() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockManagedProc)(nil).Term))
}

// Usr1 mocks base method
func (m *MockManagedProc) Usr1() error {
	ret := m.ctrl.Call(m, "Usr1")
	ret0, _ := ret[0].(error)
	return ret0
}

// Usr1 indicates an expected call of Usr1
func (mr *MockManagedProcMockRecorder) Usr1() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usr1", reflect.TypeOf((*MockManagedProc)(nil).Usr1))
}

// Wait mocks base method
func (m *MockManagedProc) Wait() error {
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockManagedProcMockRecorder) Wait() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockManagedProc)(nil).Wait))
}
