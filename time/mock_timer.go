// Automatically generated by MockGen. DO NOT EDIT!
// Source: timer.go

package time

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Timer interface
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *_MockTimerRecorder
}

// Recorder for MockTimer (not exported)
type _MockTimerRecorder struct {
	mock *MockTimer
}

func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &_MockTimerRecorder{mock}
	return mock
}

func (_m *MockTimer) EXPECT() *_MockTimerRecorder {
	return _m.recorder
}

func (_m *MockTimer) C() <-chan time.Time {
	ret := _m.ctrl.Call(_m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

func (_mr *_MockTimerRecorder) C() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "C")
}

func (_m *MockTimer) Reset(d time.Duration) bool {
	ret := _m.ctrl.Call(_m, "Reset", d)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTimerRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

func (_m *MockTimer) Stop() bool {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTimerRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
